{"version":3,"sources":["components/App.js","components/Header.js","components/Footer.js","components/Screen.js","components/Button.js","components/ButtonList.js","components/ButtonGroup.js","index.js"],"names":["App","useState","screenText","setScreenText","darkMode","setDarkMode","handleClickOperation","buttonValue","result","val","substring","length","handleSubmit","e","preventDefault","eval","toString","className","Header","props","headingStyle","color","Fragment","src","alt","style","cursor","onClick","Footer","textAlign","Screen","type","value","onChange","target","Button","bind","ButtonList","operations","map","i","key","ButtonGroup","onSubmit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75d95882.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './styles/App.css';\nimport ButtonGroup from './ButtonGroup';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst App = ()=> {\n  const [screenText, setScreenText] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n\n  const handleClickOperation = (buttonValue) => {\n    let result = '';\n    if (buttonValue === '=') {     // evaluate the expression and set the new state\n      return;\n    } else if (buttonValue === 'C') {\n      result=''\n    } else if (buttonValue === '<=' && screenText !== '') {\n      let val = screenText;\n      result = val.substring(0, val.length - 1);\n    } else if (buttonValue !== '=' && buttonValue !== '<=') {\n      result = screenText+buttonValue;\n    }\n    setScreenText(result);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    let result = '';\n    try {\n      // eslint-disable-next-line no-eval\n      result = eval(screenText);\n    } catch (e) {}\n    result = result.toString();\n    setScreenText(result);\n  }\n\n  return (\n    <div className={darkMode ? \"darkApp app\" : \"lightApp app\"}>\n      <div className={darkMode ? \"darkCalculator calculator\" : \"lightCalculator calculator\"}>\n        <Header \n          darkMode={darkMode}\n          setDarkMode={setDarkMode}\n        />\n        <ButtonGroup \n          darkMode={darkMode}\n          screenText={screenText}\n          setScreenText={setScreenText}\n          handleClickOperation={handleClickOperation}\n          handleSubmit={handleSubmit}\n        />\n      </div>\n      <Footer darkMode={darkMode}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = (props) => {\n    const handleClick = () => {\n        props.setDarkMode(!props.darkMode);\n    }\n    const headingStyle={\n        color: props.darkMode ? 'white' : 'black'\n    }\n    const iconStyle = {\n        cursor: 'pointer'\n    }\n    return (\n        <React.Fragment>\n            <img src=\"logo192.png\" alt=\"react\" style={iconStyle} onClick={handleClick}/>\n            <h1 style={headingStyle}>React Calculator</h1>\n        </React.Fragment>\n    )\n}\n\nHeader.propTypes = {\n    darkMode: PropTypes.bool.isRequired,\n    setDarkMode: PropTypes.func.isRequired\n}\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Footer = (props) => {\n    const getFooterStyle = () => {\n        return {\n            textAlign: 'center',\n            color: props.darkMode ? 'white' : 'black'\n        }\n    }\n    return (\n        <div style={getFooterStyle()}>\n            &copy; Gaurav Walia 2020\n        </div>\n    )\n;}\n\nFooter.propTypes = {\n    darkMode: PropTypes.bool.isRequired\n}\nexport default Footer;\n","import React from 'react';\nimport \"./styles/Screen.css\";\nimport PropTypes from 'prop-types';\n\nconst Screen = (props) => {\n    const handleInput = (e)=> {\n        e.preventDefault();\n        props.setScreenText(e.target.value);\n    }\n\n    return (\n        <div className=\"screen\">\n            <input \n                type=\"text\" \n                value={props.screenText} \n                onChange={handleInput} \n                className={props.darkMode ? 'screenInput darkInput' : 'screenInput lightInput'}\n            />\n        </div>\n    )\n}\n\nScreen.propTypes={\n    screenText: PropTypes.string.isRequired,\n    setScreenText: PropTypes.func.isRequired,\n    darkMode: PropTypes.bool.isRequired\n}\n\nexport default Screen;","import React from 'react';\nimport './styles/Button.css';\nimport PropTypes from 'prop-types';\n\nconst Button = (props) => {\n  return (\n    <button\n      className={\n        props.darkMode\n          ? 'operationButton darkButton'\n          : 'operationButton lightButton'\n      }\n      onClick={props.handleClickOperation.bind(this, props.value)}\n      type={props.value === '=' ? 'submit' : 'button'}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  screenText: PropTypes.string.isRequired,\n  handleClickOperation: PropTypes.func.isRequired,\n  darkMode: PropTypes.bool.isRequired\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\nimport PropTypes from 'prop-types';\n\nconst ButtonList = (props)=>{\n    return (\n        <div>\n            {props.operations.map((i) => (\n                <Button value={i} \n                screenText={props.screenText} \n                handleClickOperation={props.handleClickOperation} \n                darkMode={props.darkMode}\n                key={i}\n                />)\n                )\n            }\n        </div>\n    )\n}\n\nButtonList.propTypes = {\n    operations: PropTypes.array.isRequired,\n    screenText: PropTypes.string.isRequired,\n    handleClickOperation: PropTypes.func.isRequired,\n    darkMode: PropTypes.bool.isRequired\n}\n\nexport default ButtonList;","import React from 'react';\nimport Screen from './Screen';\nimport ButtonList from './ButtonList';\nimport PropTypes from 'prop-types';\n\nconst ButtonGroup = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Screen \n                screenText={props.screenText} \n                setScreenText={props.setScreenText}\n                darkMode={props.darkMode}\n            />\n            <ButtonList\n                operations={[0, 1, 2, 3, 4]}\n                screenText={props.screenText}\n                handleClickOperation={props.handleClickOperation}\n                darkMode={props.darkMode}\n            />\n            <ButtonList\n                operations={[5, 6, 7, 8, 9]}\n                screenText={props.screenText}\n                handleClickOperation={props.handleClickOperation}\n                darkMode={props.darkMode}\n            />\n            <ButtonList\n                operations={['+', '-', '*', '/','%']}\n                screenText={props.screenText}\n                handleClickOperation={props.handleClickOperation}\n                darkMode={props.darkMode}\n            />\n            <ButtonList\n                operations={['C', '<=', '.','=']}\n                screenText={props.screenText}\n                handleClickOperation={props.handleClickOperation}\n                darkMode={props.darkMode}\n            />\n        </form>\n    )\n}\n\nButtonGroup.propTypes = {\n    darkMode: PropTypes.bool.isRequired,\n    screenText: PropTypes.string.isRequired,\n    setScreenText: PropTypes.func.isRequired,\n    handleClickOperation: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n}\n\nexport default ButtonGroup;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}